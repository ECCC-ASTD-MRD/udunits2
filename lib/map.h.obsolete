#ifndef UT_MAP_H_INCLUDED
#define UT_MAP_H_INCLUDED

typedef struct Map	Map;

#ifdef __cplusplus
extern "C" {
#endif


/*
 * Returns a new instance of a map.
 *
 * Arguments:
 *	compare	Function for comparing keys.
 * Returns:
 *	NULL	Operating-system failure.  See "errno".
 *	else	Pointer to the new map.
 */
Map*
mapNew(
    int	(*compare)(const void*, const void*));


/*
 * Returns the address of the pointer to which a key maps.
 *
 * Arguments:
 *	map	Pointer to the map.
 *	key	Pointer to the key.
 * Returns:
 *	NULL	There is no pointer associated with "key".
 *	else	Address of the pointer to which "key" maps.
 */
void**
mapFind(
    const Map* const	map,
    const void* const	key);


/*
 * Returns the address of the pointer to which a key maps -- creating a new
 * entry if necessary.  If a new entry is created, then the pointer whose
 * address is returned will be NULL.
 *
 * Arguments:
 *	map	Pointer to the map.
 *	key	Pointer to the key.
 * Returns:
 *	NULL	Operating system failure.  See "errno".
 *	else	Address of the pointer to which "key" maps.
 */
void**
mapSearch(
    Map* const	map,
    const void*	key);


/*
 * Removes the map entry that corresponds to a key.
 *
 * Arguments:
 *	map	Pointer to the map.
 *	key	Pointer to the key.
 */
void
mapRemove(
    Map* const		map,
    const void* const	key);


/*
 * Frees a map.  This function should be called when a map is no longer needed.
 *
 * Arguments:
 *	map	Pointer to the map to be freed or NULL.  Use of "map" upon
 *		return results in undefined behavior.
 */
void
mapFree(
    Map* const	map);


#ifdef __cplusplus
}
#endif

#endif
